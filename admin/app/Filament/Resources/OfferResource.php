<?php

namespace App\Filament\Resources;

use App\Enums\NetworkType;
use App\Enums\OfferPlatform;
use App\Enums\OfferStatus;
use Filament\Forms;
use Filament\Tables;
use App\Models\Offer;
use App\Models\Country;
use App\Models\Network;
use App\Models\Category;
use Filament\Forms\Form;
use Filament\Tables\Table;
use Filament\Resources\Resource;
use Illuminate\Support\Facades\DB;
use Filament\Tables\Filters\Filter;
use function Laravel\Prompts\table;
use Filament\Support\Enums\Platform;
use Filament\Forms\Components\Select;
use Illuminate\Support\Facades\Cache;
use Filament\Tables\Enums\FiltersLayout;
use Illuminate\Database\Eloquent\Builder;
use Filament\Resources\Concerns\Translatable;
use App\Filament\Resources\OfferResource\Pages;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use ValentinMorice\FilamentJsonColumn\FilamentJsonColumn;
use App\Filament\Resources\OfferResource\RelationManagers;
use Filament\Tables\Filters\QueryBuilder\Constraints\TextConstraint;
use Filament\Tables\Filters\QueryBuilder\Constraints\NumberConstraint;
use Filament\Tables\Filters\QueryBuilder\Constraints\SelectConstraint;
use Filament\Tables\Filters\QueryBuilder\Constraints\RelationshipConstraint;
use Illuminate\Support\Str;

use App\Filament\Resources\OfferResource\RelationManagers\OfferGoalRelationManager;
use App\Models\Tier;
use Filament\Forms\Get;
use Filament\Forms\Set;
use Filament\Tables\Actions\BulkAction;
use Filament\Tables\Actions\BulkActionGroup;
use Filament\Tables\Filters\QueryBuilder\Constraints\RelationshipConstraint\Operators\IsRelatedToOperator;
use Illuminate\Database\Eloquent\Collection;

class OfferResource extends Resource
{
    protected static ?string $model = Offer::class;
    use Translatable;
    protected static ?int $navigationSort = 3;
    protected static ?string $navigationGroup = "Tasks & Survey Management";
    protected static ?string $navigationIcon = 'heroicon-o-gift';
    protected ?string $subheading = 'Manage Offers here.';

    public static function form(Form $form): Form
    {
        return $form
            ->columns(3)
            ->schema([
                Forms\Components\Group::make()
                    ->columnSpan(2)
                    ->schema([
                        Forms\Components\Section::make('Offer Information')
                            ->schema([
                                Forms\Components\Select::make('network')
                                    ->options(Network::getAll())
                                    ->disabledOn('edit')
                                    ->native(true)
                                    ->required()
                                    ->live()
                                    ->afterStateUpdated(fn(Set $set, Get $get) => $set('offer_id', Str::slug($get('network')) . '_' . $get('campaign_id')))
                                    ->infotip("The network which the offer belongs to."),
                                Forms\Components\TextInput::make('campaign_id')
                                    ->disabledOn('edit')
                                    ->label('Campaign ID')
                                    ->required()
                                    ->maxLength(255)
                                    ->debounce(300)
                                    ->live()
                                    ->afterStateUpdated(fn(Set $set, Get $get) => $set('offer_id', Str::slug($get('network')) . '_' . $get('campaign_id')))
                                    ->infotip("The campaign id of the offer in the network dashboard."),
                                Forms\Components\TextInput::make('offer_id')
                                    ->disabledOn('edit')
                                    ->label('Offer ID (Auto Generated)')
                                    ->required()
                                    ->maxLength(255)
                                    ->readOnly()
                                    ->infotip("This is autogenerated field used internally. Generated using network and campaign_id."),
                                Forms\Components\TextInput::make('payout')
                                    ->numeric()
                                    // ->disabledOn('edit')
                                    ->required()
                                    ->infotip("Payout given to the user after platform deductions."),
                                Forms\Components\TextInput::make('url')
                                    ->required()
                                    ->disabledOn('edit')
                                    ->maxLength(2500)
                                    ->columnSpanFull()
                                    ->infotip("The url to redirect the user to. Replace the macro #USER_ID with the appropriate placeholder to dynamically replace user id on redirect."),
                                Forms\Components\TextInput::make('slug')
                                    ->required()
                                    ->disabledOn('edit')
                                    ->maxLength(255)
                                    ->columnSpanFull()
                                    ->infotip("The slug for the offer which will be used to open the modal. On visiting this url the user should be visited to the offer page."),
                                Forms\Components\Select::make('platforms')
                                    ->options(OfferPlatform::class)
                                    ->multiple()
                                    // ->disabledOn('edit')
                                    ->infotip("Select the platforms on which the offer is active. Depending on the platform the offer will be shown on respective devices."),
                                Forms\Components\Select::make('countries')
                                    ->options(Country::getAll())->multiple()
                                    // ->disabledOn('edit')
                                    ->infotip(" Select the countries in which the offer is active. Depending on the user's country the offer will be shown or hidden."),
                            ])->columns(2),
                        Forms\Components\Section::make('Offer Content')
                            ->schema([
                                Forms\Components\TextInput::make('name')
                                    ->required()
                                    ->columnSpanFull()
                                    ->infotip("The name of the offer displayed on the frontend."),
                                Forms\Components\Textarea::make('description')
                                    ->columnSpanFull()
                                    ->infotip("Additional information about the offer describing more details about the offer."),
                                Forms\Components\Textarea::make('instructions')
                                    ->columnSpanFull()
                                    ->infotip("Add specific instructions for the user to avail the offer."),
                                Forms\Components\FileUpload::make('image')
                                    ->helperText("Filetype: .png, .jpg, .gif. Max Size: 2MB")
                                    ->infotip("This is the primary image displayed on the offer popup or page.")
                                    ->maxSize(2100)
                                    ->image()
                                    ->disk('frontend')
                                    ->columnSpanFull(),
                                Forms\Components\FileUpload::make('banner_image')
                                    ->helperText("Filetype: .png, .jpg, .gif. Max Size: 2MB")
                                    ->infotip("This image is used as banner for the background. It will be effective when the large offer style is selected from UI Settings.")
                                    ->maxSize(2100)
                                    ->image()
                                    ->disk('frontend')
                                    ->columnSpanFull(),
                            ])->columns(3),
                    ]),

                Forms\Components\Group::make()
                    ->schema([
                        Forms\Components\Section::make('Manage Offer')
                            ->schema([

                                Forms\Components\Select::make('category_id')
                                    ->label('Category')
                                    ->relationship('category', 'name')
                                    ->getOptionLabelFromRecordUsing(fn (Category $category) => $category->name)
                                    ->hintIcon('heroicon-o-question-mark-circle')
                                    ->hintIconTooltip('this offer will be associated with this category')
                                    ->extraFieldWrapperAttributes([
                                        'class' => 'category-block',
                                    ])
                                    ->required(),

                                Forms\Components\Select::make('tier')
                                    ->label('Tier')
                                    ->options(function() {
                                        return Tier::where('enabled',1)->pluck('label', 'id')->toArray();
                                    })
                                    ->getOptionLabelFromRecordUsing(fn (Tier $tier) => $tier->label)
                                    ->hintIcon('heroicon-o-question-mark-circle')
                                    ->hintIconTooltip('This will determine the current tier required by the user for accessing the task.')
                                    ->required()
                                    ->columnSpanFull(),

                                Forms\Components\Radio::make('status')
                                    ->options(OfferStatus::class)
                                    ->default(OfferStatus::Draft->value)
                                    ->columnSpanFull()
                                    ->inline()
                                    ->inlineLabel(false),

                                Forms\Components\Toggle::make('is_translated')->visible(false)->label('Is Translated')->columnSpanFull(),

                                Forms\Components\Toggle::make('app_open_external_browser')
                                    ->label('Open Offer in External Browser (App)')
                                    ->required()
                                    ->default(0)
                                    ->hintIcon('heroicon-o-question-mark-circle')
                                    ->hintIconTooltip('When enabled, offers open in the external browser. When disabled, offers open in the in-app browser.')
                                    ->columnSpanFull(),

                                Forms\Components\Toggle::make('is_featured')->label('Is Featured'),

                                Forms\Components\Toggle::make('screenshot_upload')->label('Screenshot Upload'),
                            ]),
                        Forms\Components\Section::make('Offer Stats')
                            ->schema([
                                Forms\Components\TextInput::make('goals_count')
                                    ->label('Goals Count')
                                    ->required()->disabledOn('edit')
                                    ->numeric()->columnSpanFull(),
                                Forms\Components\TextInput::make('redemptions')
                                    ->numeric()
                                    ->disabledOn('edit'),
                                Forms\Components\TextInput::make('clicks')
                                    ->numeric()
                                    ->disabledOn('edit'),
                                Forms\Components\DatePicker::make('created_at')
                                    ->label('Created At'),
                                Forms\Components\DatePicker::make('updated_at')
                                    ->label('Updated At'),
                            ])
                            ->columns(2)
                            ->visible(fn($operation) => $operation == 'edit'),
                    ]),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('networkModel.name')
                    ->description(fn($record) => $record->network)
                    ->label("Network")
                    ->searchable(query: function (Builder $query, string $search): Builder {
                        return $query
                            ->where('network','like',"%{$search}%")
                            ->whereHas('networkModel', fn($q) => $q->where('name', 'like', "%{$search}%"));
                    }),

                Tables\Columns\TextColumn::make('campaign_id')
                    ->searchable(),

                Tables\Columns\TextColumn::make('name')
                    ->limit(40)
                    ->tooltip(fn($state) => $state)
                    ->searchable(),

                Tables\Columns\TextColumn::make('slug')
                    ->limit(40)
                    ->tooltip(fn($state) => $state)
                    ->searchable()
                    ->toggleable(isToggledHiddenByDefault: true),

                Tables\Columns\TextColumn::make('category.name')
                    ->numeric()
                    ->sortable(),

                Tables\Columns\TextColumn::make('payout')
                    ->formatStateUsing(fn($state) => formatCurrency($state))
                    ->sortable(),

                Tables\Columns\TextColumn::make('redemptions')
                    ->formatStateUsing(fn($state) => formatNumber($state))
                    ->numeric()
                    ->sortable(),

                Tables\Columns\TextColumn::make('status')
                    ->badge(),

                Tables\Columns\IconColumn::make('is_featured')
                    ->boolean(),

                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('network')
                    ->options(Network::where('type',NetworkType::Tasks->value)->pluck('name','code'))
                    ->getOptionLabelUsing(fn($label) => $label->name)
                    ->preload()
                    ->searchable()
                    ->native(false),
                Tables\Filters\SelectFilter::make('category_id')
                    ->options(Category::pluck('name','id'))
                    ->getOptionLabelUsing(fn($label) => $label->name)
                    ->preload()
                    ->searchable()
                    ->native(false),
                Tables\Filters\SelectFilter::make('status')
                    ->options(OfferStatus::class),
                Tables\Filters\TernaryFilter::make('is_featured'),
                Tables\Filters\TernaryFilter::make('screenshot_upload'),            

                Filter::make('countries')
                    ->form([
                        Select::make('countries')
                            ->multiple()
                            ->options(
                                Country::select([
                                    DB::raw("CONCAT(name, ' - ', code) AS country_name"), 'code',
                                ])->pluck('country_name', 'code')->toArray()
                            ),
                    ])->query(function (Builder $query, array $data): Builder {
                        return $query
                            ->when(
                                $data['countries'],
                                fn (Builder $query, $data): Builder => $query->where('countries', 'like', '%' . implode(',', $data) . '%')->orWhere('countries', 'like', implode(',', $data)),
                            );
                    }),
                Filter::make('platforms')
                    ->form([
                        Select::make('platforms')
                            ->multiple()
                            ->options(OfferPlatform::class),
                    ])->query(function (Builder $query, array $data): Builder {
                        return $query
                            ->when(
                                $data['platforms'],
                                fn (Builder $query, $data): Builder => $query->where('platforms', 'like', '%' . implode(',', $data) . '%')->orWhere('platforms', 'like', implode(',', $data)),
                            );
                    })
            ])
            ->filtersFormColumns(2)
            ->actions([
                Tables\Actions\EditAction::make()->label("")->tooltip("Edit")->size("xl"),
            ])
            ->bulkActions([

                BulkActionGroup::make(

                    collect([
                        ['featured', 'Mark as Featured', 'heroicon-o-check-badge', true],
                        ['not_featured', 'Mark as Not Featured', 'heroicon-o-x-circle', false],

                    ])->map(fn ($action) => BulkAction::make($action[0])
                    
                        ->requiresConfirmation()
                        ->label($action[1])
                        ->icon($action[2])
                        ->action(function ($livewire) use ($action) {
                            
                            
                            $selectedIds = $livewire->getSelectedTableRecords()->pluck('id')->toArray();
                                                       
                            if (!empty($selectedIds)) {

                                logger('Before Processing: ' . json_encode($selectedIds));                           
                                
                                foreach (array_chunk($selectedIds, 1000) as $chunk) {
                                    logger('Processing chunk of ' . count($chunk) . ' IDs');
                                    Offer::whereIn('id', $chunk)
                                        ->update(['is_featured' => $action[3]]);
                                }
                                
                            }
                        })
                        ->deselectRecordsAfterCompletion()
                        
                    )->toArray()            

                )->label('Bulk Actions'),

                BulkAction::make('change_status')
                    ->label('Bulk Status Change')
                    ->icon('heroicon-o-check-circle')
                    ->modalWidth('lg')
                    ->form([
                        Select::make('status')
                        ->options(OfferStatus::class)                
                        ->required()
                  
                    ])
                    ->action(function(Collection $records, array $data) {
                                               
                        Offer::whereIn('id', $records->pluck('id'))
                        ->update(['status' => $data['status']]);
                    })
                    ->deselectRecordsAfterCompletion()
                    ->button(),
                
            ])
            ->selectCurrentPageOnly();
    }

    public static function getRelations(): array
    {
        return [
            OfferGoalRelationManager::class,
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListOffers::route('/'),
            'create' => Pages\CreateOffer::route('/create'),
            'edit' => Pages\EditOffer::route('/{record}/edit'),
        ];
    }
}
